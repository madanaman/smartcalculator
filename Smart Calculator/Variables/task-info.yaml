type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class CalcTest(StageTest):
        def generate(self) -> List[TestCase]:
            cases = {"n = 3\nm=4\na =   5\nb = a\nn\nm\na\nb\ncount = 10\ncount\n/exit": "3\n4\n5\n5\n10\nBye!",
                     "4 + 6 - 8\n\n\n2 - 3 - 4\n\n8 + 7 - 4\n/exit": "2\n-5\n11\nBye!",
                     "a = 3\nb = 4\nc = 5\na + b - c\nb - c + 4 - a\na = 800\na + b + c\n/exit": "2\n0\n809\nBye!",
                     "/command\n/exit": "Unknown command\nBye!",
                     "a = 1\na = 2\na = 3\na\n/exit": "3\nBye!",
                     "q\nr\nq = 10\nr = 20\nq\nr\nR\n/exit": "Unknown variable\nUnknown variable\n10\n20\nUnknown variable\nBye!",
                     "a1 = 8\nn = a2a\na = 7 = 8\nnum = 10\n/exit": "Invalid identifier\nInvalid assignment\nInvalid assignment\nBye!"}
            return [TestCase(stdin=case,
                             attach=cases[case])
                    for case in cases]

        def check(self, reply: str, attach) -> CheckResult:
            return CheckResult(reply.strip() == attach.strip(), "")


    if __name__ == '__main__':
        CalcTest("calculator.calculator").run_tests()
  learner_created: false
- name: calculator/calculator.py
  visible: true
  text: |
    import re


    def add_numbers(a, b):
        return a + b


    def subtract_numbers(a, b):
        return a - b


    def parse_operator(operator):
        # Only minus sign contributes to changing sign at the moment
        if operator.count("-") % 2 == 0:
            return "+"
        return "-"


    def do_calculation(in_array):
        # nums = [int(in_array[i]) for i in range(len(in_array)) if i % 2 == 0]
        # operators = [parse_operator(in_array[i]) for i in range(len(in_array)) if i % 2 != 0]
        nums = re.split(r"[-+]+", in_array.replace(" ", ""))
        if '' in nums:
            nums.remove('')
        # print(nums)
        operators = re.findall(r"[-+]+", in_array.replace(" ", ""))
        # print(operators)

        total = int(nums[0])
        if len(nums) == 1 and in_array.index(operators[0]) == 0:
            if operators[0] == '-':
                return total * -1
            else:
                total
        elif len(nums) == 1:
            raise Exception

        for i in range(1, len(nums)):
            if operators[i - 1] == "-":
                total = subtract_numbers(total, int(nums[i]))
            else:
                # print('in for loop else')
                total = add_numbers(total, int(nums[i]))
            # print("iteration:", i, nums[i], total)
        return total


    allowed_commands = ("/exit", "/help")
    while True:
        values = input()
        # print("values=", values)
        if values not in allowed_commands and values.startswith("/"):
            print("Unknown command")
            continue
        if len(values) == 0:
            continue
        if values == "/exit":
            break
        if values == "/help":
            print("The program calculates the sum of numbers")
            continue
        try:
            print(do_calculation(values))
        except Exception:
            print("Invalid expression")
        # print(do_calculation(values))
    print("Bye!")
  learner_created: true
feedback_link: https://hyperskill.org/projects/74/stages/414/implement
status: Solved
record: -1

type: edu
custom_name: stage7
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase


    class CalcTest(StageTest):
        def generate(self) -> List[TestCase]:
            return [TestCase(stdin=['/help', self.test_1, self.test_2, self.test_3, self.test_4, self.test_5, self.test_6,
                                    self.test_7, self.test_8, self.test_9, self.test_10, self.test_11, self.test_12,
                                    self.test_13, self.test_14, self.test_15, self.test_16, self.test_17, self.test_18,
                                    self.test_19, self.test_20, self.test_21, self.test_22, self.test_23, self.test_exit])]

        # test of previous steps' functionality ####################################
        # help message test
        def test_1(self, output):
            output = str(output).lower().strip()
            if len(output.split(" ")) < 3:
                return CheckResult.wrong("It seems like there was no any \"help\" message.")
            return ""

        # empty string test
        def test_2(self, output):
            output = str(output)
            if len(output) != 0:
                return CheckResult.wrong("Incorrect response to an empty string. "
                                         "The program should not print anything.")
            return "n = -32"

        # assignment test
        def test_3(self, output):
            if len(output) != 0:
                return CheckResult.wrong("Unexpected reaction after assignment." +
                                         "The program should not print anything in this case.")
            return "33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4"

        # addition and subtraction test
        def test_4(self, output):
            output = str(output).lower().strip()
            if output != "-3":
                return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.")
            return "33 + 20 + 11 + 49 + n - 9 + 1 - 80 + 4"

        # addition and subtraction with variables
        def test_5(self, output):
            output = str(output).lower().strip()
            if output != "-3":
                return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.")
            return "c = n \nc = -2"

        # assignment by a variable and reassignment
        def test_6(self, output):
            if len(output) != 0:
                return CheckResult.wrong("Unexpected reaction after assignment."
                                         "The program should not print anything in this case.")
            return "  c   "

        # checking the value of variable
        def test_7(self, output):
            output = str(output).lower().strip()
            if output != "-2":
                return CheckResult.wrong("The variable stores not a correct value."
                                         "May be the program could not assign the value of one variable to another one.")
            return "11 - 9 + с"

        # zero sum test
        def test_8(self, output):
            output = str(output).lower().strip()
            if output != "0":
                return CheckResult.wrong("The problem when sum is equal to 0 has occurred.")
            return "5 --- 2 ++++++ 4 -- 2 ---- 1"

        # multiple operations with several operators
        def test_9(self, output):
            output = str(output).lower().strip()
            if output != "10":
                return CheckResult.wrong("The program cannot process multiple operations with several operators.")
            return "/start"

        # nonexistent command
        def test_10(self, output):
            output = str(output).lower().strip()
            if "unknown" not in output:
                return CheckResult.wrong("The program should print \"Unknown command\" "
                                         "when a nonexistent command is entered.")
            return "var1 = 1"

        # invalid name of variable
        def test_11(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The value can be an integer number or a value of another variable")
            return "c = 7 - 1 = 5"

        # invalid assignment
        def test_12(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The program could not handle a invalid assignment.")
            return "variable = f"

        # assignment by unassigned variable
        def test_13(self, output):
            output = str(output).lower().strip()
            if "unknown" not in output or "invalid" not in output:
                return CheckResult.wrong("The program should not allow an assignment by unassigned variable.")
            return "variable = 777 \n Variable"

        # a test suit for the current stage ########################################
        # test of case sensitivity
        def test_14(self, output):
            output = str(output).lower().strip()
            if "unknown" not in output:
                return CheckResult.wrong("The program should be case sensitive.")
            return "4 * 3"

        # multiplication operation test
        def test_15(self, output):
            output = str(output).lower().strip()
            if output != "12":
                return CheckResult.wrong("The program has problems with multiplication operation.")
            return "91 / 13"

        # division operation test
        def test_16(self, output):
            output = str(output).lower().strip()
            if output != "7":
                return CheckResult.wrong("The program has problems with division operation.")
            return " a= 7 \n b =2\na * 4 / b - (3 - 1)"

        # test of mixed operations with a variable
        def test_17(self, output):
            output = str(output).lower().strip()
            if output != "16":
                return CheckResult.wrong("The program cannot correctly process several operations.")
            return "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)"

        # test of an example from the task
        def test_18(self, output):
            output = str(output).lower().strip()
            if output != "155":
                return CheckResult.wrong("The program cannot reproduce an example from the task.")
            return "3 + (9 + ( 68 * 3/9)) * ((7-2 * 5) / 2 * 6"

        # test of multi-level parentheses
        def test_19(self, output):
            output = str(output).lower().strip()
            if output != "288":
                return CheckResult.wrong("Program incorrectly solves expressions with multi-level parentheses")
            return "8 * (2 + 3"

        # negative tests for this stage ############################################
        # unclosed brackets from the right
        def test_20(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The program could not handle an invalid expression.")
            return "4 + 5)"

        # unclosed brackets from the left
        def test_21(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("The program could not handle an invalid expression.")
            return "2 ************ 2"

        # sequence of "*"
        def test_22(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("A sequence of \"*\" should return \"Invalid expression\".")
            return "2 // 2"

        # sequence of "/"
        def test_23(self, output):
            output = str(output).lower().strip()
            if "invalid" not in output:
                return CheckResult.wrong("A sequence of \"/\" should return \"Invalid expression\".")
            return "/exit"

        # test of exit
        def test_exit(self, output):
            output = str(output).lower().strip()
            if "bye" not in output:
                return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".")
            return CheckResult.correct()

        def check(self, reply: str, attach) -> CheckResult:
            return CheckResult.correct()


    if __name__ == '__main__':
        CalcTest("calculator.calculator").run_tests()
  learner_created: false
- name: calculator/calculator.py
  visible: true
  text: |
    import re


    class InvalidIdentifierException(Exception):
        pass


    class InvalidExpressionException(Exception):
        pass


    class UnknownCommandException(Exception):
        pass


    class UnknownVariableException(Exception):
        pass


    class InvalidAssignment(Exception):
        pass


    def add_numbers(a, b):
        return a + b


    def subtract_numbers(a, b):
        return a - b


    def parse_operator(operator):
        # Only minus sign contributes to changing sign at the moment
        if operator.count("-") % 2 == 0:
            return "+"
        return "-"


    def num_or_var(var):
        if var.upper() == var.lower():
            return int(var)
        else:
            if re.match(r"^[aA-zZ]+$", var) is None:
                raise InvalidIdentifierException
            elif var in all_vars:
                return all_vars[var]
            else:
                raise UnknownVariableException


    def do_calculation(in_array):
        # nums = [int(in_array[i]) for i in range(len(in_array)) if i % 2 == 0]
        # operators = [parse_operator(in_array[i]) for i in range(len(in_array)) if i % 2 != 0]
        nums = re.split(r"[-+]+", in_array.replace(" ", ""))
        if '' in nums:
            nums.remove('')
        # print(nums)
        operators = re.findall(r"[-+]+", in_array.replace(" ", ""))
        # print(operators)

        # total = int(nums[0])
        total = num_or_var(nums[0])
        # if len(nums) == 1 and in_array.index(operators[0]) == 0:
        # This code is to check for conditions pass: +11, -11. Fail 11+, 11-
        if len(nums) == 1 and len(operators) > 0 and in_array.index(operators[0]) == 0:
            if operators[0] == '-':
                return total * -1
            else:
                total
        elif len(nums) == 1 and len(operators) > 0 and in_array.index(operators[0]) != 0:
            raise Exception

        for i in range(1, len(nums)):
            if operators[i - 1] == "-":
                total = subtract_numbers(total, num_or_var(nums[i]))
            else:
                # print('in for loop else')
                total = add_numbers(total, num_or_var(nums[i]))
            # print("iteration:", i, nums[i], total)
        return total


    def validate(expr):
        split_val = expr.replace(" ", "").split("=")
        if re.match(r"^[aA-zZ]+$", split_val[0]) is None:
            raise InvalidIdentifierException
        if re.match(r"^[aA-zZ]+", split_val[1]) is not None and re.search(r"[0-9]+", split_val[1]) is not None:
            raise InvalidAssignment
        if re.match(r"^[aA-zZ]+[ ]*=[ ]*[0-9aA-zZ]+[ ]*$", expr) is None:
            raise InvalidAssignment
        all_vars[split_val[0]] = num_or_var(split_val[1])

        # if "=" not in expr:
        #     if expr not in all_vars:
        #         raise UnknownVariableException


    allowed_commands = ("/exit", "/help")
    all_vars = {}
    while True:
        values = input()
        # print("values=", values)
        if values not in allowed_commands and values.startswith("/"):
            print("Unknown command")
            continue
        if len(values) == 0:
            continue
        if values == "/exit":
            break
        if values == "/help":
            print("The program calculates the sum of numbers")
            continue
        if re.match(r"^[aA-zZ]+", values) is not None and "=" in values:
            try:
                validate(values)
                continue
            except InvalidIdentifierException:
                print("Invalid identifier")
                continue
            except InvalidAssignment:
                print("Invalid assignment")
                continue
            except UnknownVariableException:
                print("Unknown variable")
                continue
        try:
            print(do_calculation(values))
        except UnknownCommandException:
            print("Unknown command")
            continue
        except ValueError:
            print("Invalid expression")
            continue
        except InvalidIdentifierException:
            print("Invalid identifier")
            continue
        except UnknownVariableException:
            print("Unknown variable")
            continue
        except Exception:
            print("Invalid expression")
            continue
        # print(do_calculation(values))
    print("Bye!")
  learner_created: true
- name: calculator/testingfile.py
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/74/stages/415/implement
status: Failed
record: 7

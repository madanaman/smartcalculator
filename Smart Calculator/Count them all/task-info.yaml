type: edu
custom_name: stage3
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    def solve(case):
        return "\n".join([str(sum([int(x) for x in n.split()])) if n != "/exit" else "Bye!" for n in case.split("\n") if n])


    class CalcTest(StageTest):
        def generate(self) -> List[TestCase]:
            cases = ["17 9\n-2 5\n\n7\n/exit", # "26\n3\n7\nBye!"
                     "/exit", # "Bye!"
                     "100 200\n500\n300 400\n200\n\n\n-500\n/exit", # "300\n500\n700\n200\n-500\nBye!"
                     "801 199 -300 500\n10 20 30 40 50 -10 -20 -30 -40\n/exit"] # "1200\n50\nBye!"
            return [TestCase(stdin=case,
                             attach=solve(case))
                    for case in cases]

        def check(self, reply: str, attach) -> CheckResult:
            return CheckResult(reply.strip() == attach.strip(), "")


    if __name__ == '__main__':
        CalcTest("calculator.calculator").run_tests()
  learner_created: false
- name: calculator/calculator.py
  visible: true
  text: "a = input().rstrip()\nwhile a != \"/exit\":\n    a = a.split()\n    if len(a)\
    \ == 0:\n        a = input()\n        continue\n    elif len(a) < 2:\n       \
    \ b = 0\n    elif len(a) == 2:\n        b = a[1]\n    a = a[0]\n    print(int(a)\
    \ + int(b))\n    a = input()\nif a == \"/exit\":\n    print('Bye!')\n    "
  learner_created: true
feedback_link: https://hyperskill.org/projects/74/stages/411/implement
status: Solved
record: 3
